/** Validation error codes. */
export enum ValidationError {
  STR = 0,
  NUM = 1,
  BOOL = 2,
  ARR = 3,
  TUP = 4,
  OBJ = 5,
  MAP = 6,
  KEY = 7,
  KEYS = 8,
  BIN = 9,
  OR = 10,
  REF = 11,
  ENUM = 12,
  CONST = 13,
  VALIDATION = 14,
  INT = 15,
  UINT = 16,
  STR_LEN = 17,
  ARR_LEN = 18,
  GT = 19,
  GTE = 20,
  LT = 21,
  LTE = 22,
}

/** Human-readable error messages by error code. */
export const ValidationErrorMessage = {
  [ValidationError.STR]: 'Not a string.',
  [ValidationError.NUM]: 'Not a number.',
  [ValidationError.BOOL]: 'Not a boolean.',
  [ValidationError.ARR]: 'Not an array.',
  [ValidationError.TUP]: 'Not a tuple.',
  [ValidationError.OBJ]: 'Not an object.',
  [ValidationError.MAP]: 'Not a map.',
  [ValidationError.KEY]: 'Missing key.',
  [ValidationError.KEYS]: 'Too many or missing object keys.',
  [ValidationError.BIN]: 'Not a binary.',
  [ValidationError.OR]: 'None of types matched.',
  [ValidationError.REF]: 'Validation error in referenced type.',
  [ValidationError.ENUM]: 'Not an enum value.',
  [ValidationError.CONST]: 'Invalid constant.',
  [ValidationError.VALIDATION]: 'Custom validator failed.',
  [ValidationError.INT]: 'Not an integer.',
  [ValidationError.UINT]: 'Not an unsigned integer.',
  [ValidationError.STR_LEN]: 'Invalid string length.',
  [ValidationError.ARR_LEN]: 'Invalid array length.',
  [ValidationError.GT]: 'Value is too small.',
  [ValidationError.GTE]: 'Value is too small.',
  [ValidationError.LT]: 'Value is too large.',
  [ValidationError.LTE]: 'Value is too large.',
};
